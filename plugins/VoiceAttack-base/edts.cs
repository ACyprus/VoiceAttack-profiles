// <auto-generated/>
// Not really, but this file will not bow to StyleCop tyranny.
// Why? Because it will be obsolete mid term anyway ;)

// <copyright file="edts.cs" company="alterNERDtive">
// Copyright 2019–2022 alterNERDtive.
//
// This file is part of alterNERDtive VoiceAttack profiles for Elite Dangerous.
//
// alterNERDtive VoiceAttack profiles for Elite Dangerous is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// alterNERDtive VoiceAttack profiles for Elite Dangerous is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with alterNERDtive VoiceAttack profiles for Elite Dangerous.  If not, see &lt;https://www.gnu.org/licenses/&gt;.
// </copyright>

#nullable enable

using System;
using System.Net.Http;
using System.Net.Http.Headers;

namespace alterNERDtive.edts
{

    public struct StarSystem
    {
        public string Name { get; set; }
        public Position Coords { get; set; }
    }
    public struct Position
    {
        public int X { get; set; }
        public int Y { get; set; }
        public int Z { get; set; }
        public int Precision { get; set; }
    }

    public class EdtsApi
    {
        private static readonly string APIURL = "http://edts.thargoid.space/api/v1/";
        private static HttpClient ApiClient;

        static EdtsApi()
        {
            ApiClient = new HttpClient
            {
                BaseAddress = new Uri(APIURL)
            };
            ApiClient.DefaultRequestHeaders.Accept.Clear();
            ApiClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        }

        public static StarSystem GetCoordinates(string name)
        {
            HttpResponseMessage response = ApiClient.GetAsync($"system_position/{name}").Result;
            
            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest) // 400
            {
                throw new ArgumentException($"“{name}” is not a valid proc gen system name.", "~system");
            }
            
            response.EnsureSuccessStatusCode();
            dynamic json = response.Content.ReadAsAsync<dynamic>().Result["result"];

            int x = json["position"]["x"];
            int y = json["position"]["y"];
            int z = json["position"]["z"];
            int uncertainty = json["uncertainty"];

            return new StarSystem { Name=name, Coords=new Position { X=x, Y=y, Z=z, Precision=uncertainty } };
        }
    }
}
